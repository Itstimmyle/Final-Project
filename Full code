#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>

using namespace std;

// Product class
class Product {
private:
    int productID;
    string productName;
    string category;
    int quantity;
    int reorderThreshold;
    double unitPrice;

public:
    Product(int id, string name, string cat, int qty, int threshold, double price)
        : productID(id), productName(name), category(cat), quantity(qty), reorderThreshold(threshold), unitPrice(price) {}

    int getProductID() const { return productID; }
    string getProductName() const { return productName; }
    string getCategory() const { return category; }
    int getQuantity() const { return quantity; }
    double getUnitPrice() const { return unitPrice; }
    int getReorderThreshold() const { return reorderThreshold; }

    void updateQuantity(int qty) { quantity = qty; }

    void display() const {
        cout << setw(10) << productID << setw(20) << productName << setw(15) << category
             << setw(10) << quantity << setw(10) << reorderThreshold << setw(10) << unitPrice << endl;
    }
};

// Inventory class
class Inventory {
private:
    vector<Product> products;

    void saveToFile() {
        ofstream file("inventory.txt", ios::trunc);
        for (const auto& product : products) {
            file << product.getProductID() << "," << product.getProductName() << ","
                 << product.getCategory() << "," << product.getQuantity() << ","
                 << product.getReorderThreshold() << "," << product.getUnitPrice() << endl;
        }
        file.close();
    }

public:
    Inventory() {
        ifstream file("inventory.txt");
        if (file.is_open()) {
            string line;
            while (getline(file, line)) {
                int id, qty, threshold;
                string name, category;
                double price;

                sscanf(line.c_str(), "%d,%[^,],%[^,],%d,%d,%lf", &id, &name[0], &category[0], &qty, &threshold, &price);
                products.emplace_back(id, name, category, qty, threshold, price);
            }
            file.close();
        }
    }

    ~Inventory() { saveToFile(); }

    void addProduct(int id, string name, string category, int qty, int threshold, double price) {
        products.emplace_back(id, name, category, qty, threshold, price);
        saveToFile();
    }

    void sellProduct(int id, int qtySold) {
        for (auto& product : products) {
            if (product.getProductID() == id) {
                if (product.getQuantity() >= qtySold) {
                    product.updateQuantity(product.getQuantity() - qtySold);
                    cout << "Sale recorded. Updated stock level: " << product.getQuantity() << endl;

                    if (product.getQuantity() <= product.getReorderThreshold()) {
                        cout << "Warning: Product " << product.getProductID() << " (" << product.getProductName()
                             << ") has low stock. Please reorder.\n";
                    }
                } else {
                    cout << "Insufficient stock available for this product.\n";
                }
                return;
            }
        }
        cout << "Product ID not found.\n";
    }

    void displayInventory() {
        cout << setw(10) << "Product ID" << setw(20) << "Product Name" << setw(15) << "Category"
             << setw(10) << "Stock" << setw(10) << "Reorder" << setw(10) << "Unit Price" << endl;
        cout << string(75, '-') << endl;
        for (const auto& product : products) {
            product.display();
        }
    }
};

int main() {
    Inventory inventory;

    int choice;
    do {
        cout << "\nInventory Management System\n";
        cout << "1. Add Product\n";
        cout << "2. Sell Product\n";
        cout << "3. Display Inventory\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            int id, qty, threshold;
            string name, category;
            double price;
            cout << "Enter Product ID: ";
            cin >> id;
            cin.ignore();
            cout << "Enter Product Name: ";
            getline(cin, name);
            cout << "Enter Category: ";
            getline(cin, category);
            cout << "Enter Quantity: ";
            cin >> qty;
            cout << "Enter Reorder Threshold: ";
            cin >> threshold;
            cout << "Enter Unit Price: ";
            cin >> price;

            inventory.addProduct(id, name, category, qty, threshold, price);
            cout << "Product added successfully.\n";
        } else if (choice == 2) {
            int id, qtySold;
            cout << "Enter Product ID: ";
            cin >> id;
            cout << "Enter Quantity Sold: ";
            cin >> qtySold;

            inventory.sellProduct(id, qtySold);
        } else if (choice == 3) {
            inventory.displayInventory();
        }
    } while (choice != 4);

    return 0;
}
